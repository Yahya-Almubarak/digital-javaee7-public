/*******************************************************************************
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright (c) 2014,2015 by Peter Pilgrim, Addiscombe, Surrey, XeNoNiQUe UK
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU GPL v3.0
 * which accompanies this distribution, and is available at:
 * http://www.gnu.org/licenses/gpl-3.0.txt
 *
 * Developers:
 * Peter Pilgrim -- design, development and implementation
 *               -- Blog: http://www.xenonique.co.uk/blog/
 *               -- Twitter: @peter_pilgrim
 *
 * Contributors:
 *
 *******************************************************************************/

// Packt Publishing and Peter A. Pilgrim present the
// ================================================================================
//    D I G I T A L      J A V A    E E   7    W E B     D E V E L O P M E N T
// ================================================================================
//
// This Gradle build is the root and does compile any software explicitly
// 

apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'

// Define equivalent Maven GAV coordinates.
group = 'uk.co.xenonique.digital'
archivesBaseName = 'digital-javaee7-web-root'
version = '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://maven.java.net/content/groups/promoted'
    }
    maven {
        url 'http://repository.jboss.org/nexus/content/groups/public'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task myZip(type: Zip) {
    description = "Creates a ZIP distribution of the `${archivesBaseName}' project."
    from '.'
    def targetName = "7942-${archivesBaseName}-sources-${version}.zip"
    println "Creating targetName=${targetName}"
    archiveName "${targetName}"
    include '**/src/**'
    include '**/*.xml'
    include '**/*.gradle'
    include '**/*.txt'
    exclude '**/.gradle/**'
    exclude '**/build/**'
    exclude '**/out/**'
    exclude '**/target/**'
    exclude '**/ch08-olde/**'
    /*
    exclude {
        details ->
            details.file.name.equals('.gradle')
    }
    */
}

// This is the root build file
File currentFile = new File(".","build.gradle")

def cleanTaskNames = []
def buildTaskNames = []
def installTaskNames = []
def stubTaskNames = []
def cleanBuildTaskNames = []
def cleanInstallTaskNames = []

// Build dynamic task names for each sub project, ensure we avoid
// recursion by excluding the root build file.
new File(".").eachFileRecurse{ file ->
    if ( file.isFile() && "build.gradle".equals(file.name) 
        && !file.equals(currentFile)) {
        String stubTaskName     = file.getParentFile().getName()
        String cleanTaskName    = "clean_"+stubTaskName
        String buildTaskName    = "build_"+stubTaskName
        String installTaskName  = "install_"+stubTaskName
        String ideaTaskName     = "idea_"+stubTaskName
        String cleanBuildTaskName    = "clean_build_"+stubTaskName
        String cleanInstallTaskName  = "clean_install_"+stubTaskName

        /* +++ DEBUG+++
        println "--+---" + file.getPath()
        println "  +-- " + file.getParentFile().getPath()
        println "  +-- " + file.getParentFile().getName()
        println "  +-->>> " + buildTaskName
        */

        cleanTaskNames << cleanTaskName
        stubTaskNames << stubTaskName

        // Dynamically create GradleBuildType tasks on the fly
        task "${cleanTaskName}"(type: GradleBuild) { 
            description = "Cleans the sub project [${stubTaskName}]"
            dir = file.getParentFile().getPath()
            tasks = ['clean']
        } 
        task "${ideaTaskName}"(type: GradleBuild) { 
            description = "Generate IDEA project meta files for the sub project [${stubTaskName}]"
            dir = file.getParentFile().getPath()
            tasks = ['idea']
        }

        // We have to block Chapter 11 example JPA Advanced, because these examples
        // require a managed application server to already be running.
        // Application server: GlassFish 4.0
        if (!file.getPath().contains("/ch11/") && 
            !file.getPath().contains("jms-async")) {
            buildTaskNames << buildTaskName
            installTaskNames << installTaskName
            cleanBuildTaskNames << cleanBuildTaskName
            cleanInstallTaskNames << cleanInstallTaskName

            task "${buildTaskName}"(type: GradleBuild) { 
                description = "Builds the sub project [${stubTaskName}]"
                dir = file.getParentFile().getPath()
                tasks = ['build']
            } 
            task "${installTaskName}"(type: GradleBuild) { 
                description = "Installs the sub project [${stubTaskName}]"
                dir = file.getParentFile().getPath()
                tasks = ['build','install']
            } 
            task "${cleanBuildTaskName}"(type: GradleBuild) { 
                description = "Cleans and builds the sub project [${stubTaskName}]"
                dir = file.getParentFile().getPath()
                tasks = ['clean', 'build']
            } 
            task "${cleanInstallTaskName}"(type: GradleBuild) { 
                description = "Cleans and installs the sub project [${stubTaskName}]"
                dir = file.getParentFile().getPath()
                tasks = ['clean', 'install']
            } 
        }
    }
}

task build {
    description = "Builds and installs only the initial project (*Embedded GlassFish utility)"
    // dependsOn 'install_glassfish-embedded'
}

task build_everything {
    description = "Build every subproject"
    dependsOn build
    buildTaskNames.each{ subTask1 -> 
        dependsOn subTask1
    }
}

task install_everything {
    description = "Builds and install every subproject"
    installTaskNames.each{ subTask1 -> 
        dependsOn subTask1
    }
}

task clean_everything {
    description = "Cleans out and reset every subproject"
    cleanTaskNames.each{ subTask1 -> 
        dependsOn subTask1
    }
}

task clean_build_everything {
    description = "Cleans and builds every subproject"
    cleanBuildTaskNames.each{ subTask1 -> 
        dependsOn subTask1
    }
}

task clean_install_everything {
    description = "Cleans and installs every subproject"
    cleanInstallTaskNames.each{ subTask1 -> 
        dependsOn subTask1
    }
}

task generate_idea_everything {
    description = "Create IDEA project files for every subproject"
    stubTaskNames.each{ subTask1 -> 
        dependsOn "idea_${subTask1}"
    }
}

// End.
